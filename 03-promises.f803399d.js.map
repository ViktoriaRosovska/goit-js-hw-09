{"mappings":"gfAAAA,EAAA,S,WAGA,IAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAI/BC,QAAQC,IAAIL,EAAKC,KAAKK,UAEtBN,EAAKC,KAAKM,iBAAiB,UAG3B,SAAmCC,GACjCA,EAAEC,iBACF,IAAgCC,EAAAF,EAAEG,OAA1BC,EAAwBF,EAAxBG,MAAOC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACfC,EAAgBD,EAAOE,MAC7Bb,QAAQC,IAAIO,EAAMK,MAAOH,EAAKG,MAAOF,EAAOE,OAC5C,IAAIC,EAAW,EACfC,YAAW,WACT,IAAMC,EAAUC,aAAY,WAoBhC,IAAuBC,EAAUT,EAnBvBK,EAAWF,EACbO,cAAcH,IAkBCE,EAfjBJ,GAAY,EAeeL,EAdHD,EAAMK,MAe3B,IAAIO,SAAQ,SAACC,EAASC,GAC1B,IAAMC,EAAgBC,KAAKC,SAAW,GACzCzB,QAAQC,IAAIsB,GACRA,EACFF,EAAQ,uBAAwCK,OAAfR,EAAS,QAAYQ,OAANjB,EAAM,OAEpDa,EAAK,sBAAqCI,OAAfR,EAAS,QAAYQ,OAANjB,EAAM,M,KApBnDkB,MAAK,SAAAC,G,IAAGV,EAAQU,EAARV,SAAUT,EAAKmB,EAALnB,MACjBoB,MAAM,SAAqBH,OAAZR,EAAS,KAAeQ,OAAZjB,EAAMI,O,IAElCiB,OAAM,SAAAF,G,IAAGV,EAAQU,EAARV,SAAUT,EAAKmB,EAALnB,MAClBoB,MAAM,SAAqBH,OAAZR,EAAS,KAASQ,OAANjB,G,MAIxBC,EAAKG,M,GACTL,EAAMK,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport Notiflix from \"notiflix\";\n\nconst refs = {\n  form: document.querySelector('.form'),\n\n}\n\nconsole.log(refs.form.elements)\n\nrefs.form.addEventListener('submit', onFormSubmitcreatePromise);\n\n\nfunction onFormSubmitcreatePromise(e) {\n  e.preventDefault();\n  const { delay, step, amount } = e.target\n  const countPosition = amount.value;\n  console.log(delay.value, step.value, amount.value)\n  let position = 1;\n  setTimeout(() => {\n    const timerId = setInterval(() => {\n      if (position > countPosition) {\n        clearInterval(timerId);\n        return;\n      }\n      position += 1;\n      createPromise(position, delay.value)\n  .then(({ position, delay }) => {\n    alert(`value ${position} ${delay.value}`);\n  })\n  .catch(({ position, delay }) => {\n    alert(`error ${position} ${delay}`);\n  });\n      \n      \n    }, step.value)\n}, delay.value);\n\n  \n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n     const shouldResolve = Math.random() > 0.3;\n  console.log(shouldResolve)\n  if (shouldResolve) {\n    resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  } else {\n    reject(`❌ Rejected promise ${position} in ${delay}ms`);\n  }\n  })\n \n}\n"],"names":["parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","console","log","elements","addEventListener","e","preventDefault","_target","target","delay1","delay","step","amount","countPosition","value","position1","setTimeout","timerId","setInterval","position","clearInterval","Promise","resolve","reject","shouldResolve","Math","random","concat","then","param","alert","catch"],"version":3,"file":"03-promises.f803399d.js.map"}